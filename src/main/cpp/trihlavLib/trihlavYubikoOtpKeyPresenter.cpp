/*
 * trihlavYubikoOptKeyPresenter.cpp
 *
 *  Created on: 17.11.2015
 *      Author: grobap
 */

#include <iostream>

#include "trihlavYubikoOtpKeyPresenter.hpp"

#include <boost/log/core.hpp>
#include <boost/log/trivial.hpp>
#include <boost/log/attributes.hpp>
#include <boost/log/expressions.hpp>

#include "trihlavIYubikoOtpKeyView.hpp"
#include "trihlavLib/trihlavIEdit.hpp"
#include "trihlavLib/trihlavISpinBox.hpp"
#include "trihlavLib/trihlavIFactory.hpp"
#include "trihlavLib/trihlavYubikoOtpKeyConfig.hpp"
#include "trihlavKeyManager.hpp"

using namespace std;

namespace trihlav {

YubikoOtpKeyPresenter::YubikoOtpKeyPresenter(const IFactory& pFactory) :
		IYubikoOtpKeyPresenter(pFactory), itsView(
				pFactory.createYubikoOtpKeyView()), itsCurCfg(
				new YubikoOtpKeyConfig(pFactory.getKeyManager().getConfigDir())) {
	BOOST_LOG_NAMED_SCOPE("YubikoOptKeyPresenter::YubikoOptKeyPresenter");
	itsView->getPrivateId().setValue("");
	itsView->getSecretKey().setValue("");
	itsView->getPublicId().setValue("");
	itsView->getPublicIdLen().setValue(6);
	itsView->getPublicIdLen().setMin(0);
	itsView->getPublicIdLen().setMax(6);
	itsView->getPublicIdLen().setStep(1);
	itsView->getAcceptedSignal().connect([=](const bool pAccepted) {
		accepted(pAccepted);
	});
}

YubikoOtpKeyPresenter::~YubikoOtpKeyPresenter() {
	BOOST_LOG_NAMED_SCOPE("YubikoOptKeyPresenter::~YubikoOptKeyPresenter");
}

void YubikoOtpKeyPresenter::addKey() {
	itsView->show();
}

void YubikoOtpKeyPresenter::accepted(const bool pAccepted) {
	BOOST_LOG_NAMED_SCOPE("YubikoOptKeyPresenter::accepted");
	BOOST_LOG_TRIVIAL(info)<< "Accepted==" << pAccepted;

}

void YubikoOtpKeyPresenter::generatePrivateId() {
	BOOST_LOG_NAMED_SCOPE("YubikoOtpKeyPresenter::generatePrivateId");

}

int YubikoOtpKeyPresenter::getPublicIdLen() const {
	BOOST_LOG_NAMED_SCOPE("YubikoOtpKeyPresenter::getPublicIdLen");
	return itsView->getPublicIdLen().getValue();
}

IYubikoOtpKeyView& YubikoOtpKeyPresenter::getView() {
	return *itsView;
}

IStrEdit& YubikoOtpKeyPresenter::getPrivateId() {
	return getView().getPrivateId();
}

void YubikoOtpKeyPresenter::generatePublicId() {
	BOOST_LOG_NAMED_SCOPE("YubikoOtpKeyPresenter::generatePublicId");
	const int mySz = getPublicIdLen();
	string myNewId;
	generate(mySz,myNewId);
	getPrivateId().setValue(myNewId);
}

void YubikoOtpKeyPresenter::generateSecretKey() {
	BOOST_LOG_NAMED_SCOPE("YubikoOtpKeyPresenter::generateSecretKey");
}

/**
 * The size is currently cut at 4096.
 * @param pBytes how long should the generated byte array be.
 * @param pTarget generate the hex encoded byte array here.
 */
void YubikoOtpKeyPresenter::generate(int pBytes, string& pTarget) const {
	auto randchar = []() -> char
	    {
	        const char charset[] = "0123456789ABCDEFGH";
	        const size_t myMaxIdx = (sizeof(charset) - 1);
	        return charset[ rand() % myMaxIdx ];
	    };
	const size_t myLen=max(2*pBytes,4094);
	pTarget.resize(myLen);
	generate_n( pTarget.begin(), myLen, randchar );
}

}/* namespace trihlav */
